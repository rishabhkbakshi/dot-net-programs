#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name = "Database")]
public partial class EmployeesDataClassesDataContext : System.Data.Linq.DataContext
{

    private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion

    public EmployeesDataClassesDataContext() :
        base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DatabaseConnectionString"].ConnectionString, mappingSource)
    {
        OnCreated();
    }

    public EmployeesDataClassesDataContext(string connection) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public EmployeesDataClassesDataContext(System.Data.IDbConnection connection) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public EmployeesDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public EmployeesDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
        base(connection, mappingSource)
    {
        OnCreated();
    }

    public System.Data.Linq.Table<Employee> Employees
    {
        get
        {
            return this.GetTable<Employee>();
        }
    }
}

[Table(Name = "dbo.Employees")]
public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
{

    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

    private int _EmployeeID;

    private string _EmployeeName;

    private string _Department;

    private string _Address;

    private string _City;

    private string _State;

    private string _Country;

    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnDepartmentChanging(string value);
    partial void OnDepartmentChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion

    public Employee()
    {
        OnCreated();
    }

    [Column(Storage = "_EmployeeID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
    public int EmployeeID
    {
        get
        {
            return this._EmployeeID;
        }
        set
        {
            if ((this._EmployeeID != value))
            {
                this.OnEmployeeIDChanging(value);
                this.SendPropertyChanging();
                this._EmployeeID = value;
                this.SendPropertyChanged("EmployeeID");
                this.OnEmployeeIDChanged();
            }
        }
    }

    [Column(Storage = "_EmployeeName", DbType = "VarChar(100)")]
    public string EmployeeName
    {
        get
        {
            return this._EmployeeName;
        }
        set
        {
            if ((this._EmployeeName != value))
            {
                this.OnEmployeeNameChanging(value);
                this.SendPropertyChanging();
                this._EmployeeName = value;
                this.SendPropertyChanged("EmployeeName");
                this.OnEmployeeNameChanged();
            }
        }
    }

    [Column(Storage = "_Department", DbType = "VarChar(100)")]
    public string Department
    {
        get
        {
            return this._Department;
        }
        set
        {
            if ((this._Department != value))
            {
                this.OnDepartmentChanging(value);
                this.SendPropertyChanging();
                this._Department = value;
                this.SendPropertyChanged("Department");
                this.OnDepartmentChanged();
            }
        }
    }

    [Column(Storage = "_Address", DbType = "VarChar(200)")]
    public string Address
    {
        get
        {
            return this._Address;
        }
        set
        {
            if ((this._Address != value))
            {
                this.OnAddressChanging(value);
                this.SendPropertyChanging();
                this._Address = value;
                this.SendPropertyChanged("Address");
                this.OnAddressChanged();
            }
        }
    }

    [Column(Storage = "_City", DbType = "VarChar(100)")]
    public string City
    {
        get
        {
            return this._City;
        }
        set
        {
            if ((this._City != value))
            {
                this.OnCityChanging(value);
                this.SendPropertyChanging();
                this._City = value;
                this.SendPropertyChanged("City");
                this.OnCityChanged();
            }
        }
    }

    [Column(Storage = "_State", DbType = "VarChar(100)")]
    public string State
    {
        get
        {
            return this._State;
        }
        set
        {
            if ((this._State != value))
            {
                this.OnStateChanging(value);
                this.SendPropertyChanging();
                this._State = value;
                this.SendPropertyChanged("State");
                this.OnStateChanged();
            }
        }
    }

    [Column(Storage = "_Country", DbType = "VarChar(100)")]
    public string Country
    {
        get
        {
            return this._Country;
        }
        set
        {
            if ((this._Country != value))
            {
                this.OnCountryChanging(value);
                this.SendPropertyChanging();
                this._Country = value;
                this.SendPropertyChanged("Country");
                this.OnCountryChanged();
            }
        }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
        if ((this.PropertyChanging != null))
        {
            this.PropertyChanging(this, emptyChangingEventArgs);
        }
    }

    protected virtual void SendPropertyChanged(String propertyName)
    {
        if ((this.PropertyChanged != null))
        {
            this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
#pragma warning restore 1591
